;M Kellen Mills 	michaelmills5@my.unt.edu
;symbolic processing with Dr. Swigger

(defun initialize ()
	(setf bank (make-building 'bank '(union) '(money5)))
	(setf union (make-building 'union '(dormitory bank) '(albert food)))
	(setf library (make-building 'library '(computer) '(swigger joke-book)))
	(setf computer (make-building 'computer '(english library) '(mary)))
	(setf dormitory (make-building 'dormitory '(english union) '(player bed)))
	(setf english (make-building 'english '(dormitory computer-lab) '(garbage lost-dreams)))

	(setf mary (make-person 'mary 'computer-lab '(mary-ID)))
	(setf albert (make-person 'albert 'union '(money1 albert-ID)))
	(setf swigger (make-person 'swigger 'library '(knowledge)))
	(setf player (make-person 'player 'dormitory '(dorm-key money1 player-ID)))
	
	(setf money1 (make-possession 'money1 'currency 'buy-food))
	(setf money5 (make-possession 'money5 'currency 'buy-tutoring))
	(setf player-ID (make-possession 'player-ID 'ID-card 'access-player))
	(setf mary-ID (make-possession 'mary-ID 'ID-card 'access-mary))
	(setf albert-ID (make-possession 'albert-ID 'ID-card 'access-albert))
	(setf knowledge (make-possession 'knowledge 'metaphor 'pass-assignment))
	(setf dorm-key (make-possession 'dorm-key 'bedroom-key 'unlock-sleeping))
	(setf food (make-possession 'food 'nourishment 'energize-brain))
	(setf joke-book (make-possession 'joke-book 'entertainment 'passing-time))
	(setf bed (make-possession 'bed 'essential 'restores-sanity))
	(setf garbage (make-possession 'garbage 'trash 'make-smelly))
	(setf lost-dreams (make-possession 'lost-dreams 'social-construct 'depressing)))

(defun make-person (name location possessions)
	(lambda (message)
	      (cond ((equal message 'name) name)
		        ((equal message 'location) location)
                        ((equal message 'possessions) possessions)
			((equal message 'move)
			  (lambda (newplace)
			    (send (eval location) 'delete-possession name)
			      (setq location newplace)
			    (send (eval location) 'add-possession name)))
)))

(defun make-building (name neighbors possessions)
	(lambda (message)
		(cond ((equal message 'name) name)
			((equal message 'neighbors) neighbors)
			((equal message 'possessions) possessions)
			((equal message 'add-possession)
			  (lambda (possession)
			    (setf possessions (cons possession possessions))))
			((equal message 'delete-possession)
			  (lambda (possession)
			    (setf possessions (delete possession possessions))))
)))

(defun make-possession (name type use)
	(lambda (message)
		(cond ((equal message 'name) name)
			((equal message 'type) type)
			((equal message 'use) use))))

(defun ask (object message)
	(funcall object message))

(defun send (object message args)
	(funcall (ask object message) args))

(defun move (object message)
	(funcall (send object 'move message)))

(defun is-the-player-there (object)
	(cond ((member 'player (ask object 'possessions)) T)
		(T nil)))
